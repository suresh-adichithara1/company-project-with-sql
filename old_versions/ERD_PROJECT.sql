DROP DATABASE IF EXISTS XYZCOMPANY;
CREATE DATABASE XYZCOMPANY;
USE XYZCOMPANY;

DROP USER IF EXISTS 'xyzcompany'@'localhost';
CREATE USER 'xyzcompany'@'localhost' IDENTIFIED BY 'projectcode';
GRANT ALL ON XYZCOMPANY.* TO 'xyzcompany'@'localhost';
FLUSH PRIVILEGES;
COMMIT;

CREATE TABLE PERSON (
PERSONAL_ID INT PRIMARY KEY NOT NULL,
FIRST_NAME VARCHAR(30),
LAST_NAME VARCHAR(30),
BIRTH_DATE DATE,
GENDER CHAR(1),
ADDRESS_LINE_1 VARCHAR(50),
ADDRESS_LINE_2 VARCHAR(50),
CITY VARCHAR(30),
STATE VARCHAR(20),
ZIP_CODE VARCHAR(10)
);

CREATE TABLE DEPARTMENT (
DEPARTMENT_ID INT PRIMARY KEY NOT NULL,
DEPARTMENT_NAME VARCHAR(30)
);

CREATE TABLE EMPLOYEE (
EMPLOYEE_ID INT PRIMARY KEY NOT NULL,
EMPLOYEE_RANK VARCHAR(30),
EMPLOYEE_TITLE VARCHAR(30),
DEPARTMENT_ID INT,
EMPLOYEE_SUPERVISOR INT,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE,
FOREIGN KEY (EMPLOYEE_SUPERVISOR) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER CHECK_EMPLOYEE_AGE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DECLARE AGE INT;
    DECLARE DOB DATE;
    
    SELECT BIRTH_DATE INTO DOB
    FROM PERSON
    WHERE PERSONAL_ID = NEW.EMPLOYEE_ID;
    
    SET AGE = TIMESTAMPDIFF(YEAR, DOB, CURDATE());
    
    IF AGE > 65 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EMPLOYEE IS OVER 65 YEARS OLD';
    END IF;
END//
DELIMITER ;

CREATE TABLE CUSTOMER (
CUSTOMER_ID INT PRIMARY KEY NOT NULL,
PREFERRED_SALES_REP INT,
FOREIGN KEY (CUSTOMER_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE,
FOREIGN KEY (PREFERRED_SALES_REP) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

CREATE TABLE POTENTIAL_EMPLOYEE (
POTENTIAL_EMPLOYEE_ID INT PRIMARY KEY NOT NULL,
FOREIGN KEY (POTENTIAL_EMPLOYEE_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE
);

CREATE TABLE SHIFT (
EMPLOYEE_ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
SHIFT_START_TIME DATETIME NOT NULL,
SHIFT_END_TIME DATETIME,
PRIMARY KEY (EMPLOYEE_ID, DEPARTMENT_ID, SHIFT_START_TIME),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);

CREATE TABLE EMPLOYEE_WORKS_AT_DEPARTMENT (
EMPLOYEE_ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
START_DATE DATE NOT NULL,
END_DATE DATE,
PRIMARY KEY (EMPLOYEE_ID, DEPARTMENT_ID, START_DATE),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);

CREATE TABLE JOB (
JOB_ID INT PRIMARY KEY NOT NULL,
JOB_DESCRIPTION VARCHAR(100),
POSTED_DATE DATE,
DEPARTMENT_POST INT,
FOREIGN KEY (DEPARTMENT_POST) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);

CREATE TABLE APPLICANT (
APPLICANT_ID INT PRIMARY KEY AUTO_INCREMENT,
APPLICANT_CATEGORY ENUM ('EMPLOYEE', 'POTENTIAL_EMPLOYEE') NOT NULL,
EMPLOYEE_ID INT,
POTENTIAL_EMPLOYEE_ID INT,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (POTENTIAL_EMPLOYEE_ID) REFERENCES POTENTIAL_EMPLOYEE (POTENTIAL_EMPLOYEE_ID) ON DELETE CASCADE,
CHECK (
        (APPLICANT_CATEGORY = 'EMPLOYEE' AND EMPLOYEE_ID IS NOT NULL AND POTENTIAL_EMPLOYEE_ID IS NULL) OR
        (APPLICANT_CATEGORY = 'POTENTIAL_EMPLOYEE' AND POTENTIAL_EMPLOYEE_ID IS NOT NULL AND EMPLOYEE_ID IS NULL)
    )
);

CREATE TABLE APPLIED (
JOB_ID INT,
APPLICANT_ID INT,
PRIMARY KEY (JOB_ID, APPLICANT_ID),
FOREIGN KEY (JOB_ID) REFERENCES JOB (JOB_ID) ON DELETE CASCADE,
FOREIGN KEY (APPLICANT_ID) REFERENCES APPLICANT (APPLICANT_ID) ON DELETE CASCADE
);

CREATE TABLE SELECTED_FOR_INTERVIEW (
SELECTED_APPLICANT INT PRIMARY KEY AUTO_INCREMENT,
JOB_ID INT NOT NULL,
APPLICANT_ID INT NOT NULL,
FOREIGN KEY (JOB_ID) REFERENCES APPLIED (JOB_ID) ON DELETE CASCADE,
FOREIGN KEY (APPLICANT_ID) REFERENCES APPLIED (APPLICANT_ID) ON DELETE CASCADE
);

CREATE TABLE INTERVIEWER (
INTERVIEWER_ID INT PRIMARY KEY AUTO_INCREMENT,
EMPLOYEE_ID INT NOT NULL,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

CREATE TABLE INTERVIEW (
INTERVIEW_ID INT PRIMARY KEY AUTO_INCREMENT,
CANDIDATE_ID INT NOT NULL,
INTERVIEWER_ID INT NOT NULL,
JOB_POSITION INT NOT NULL,
INTERVIEW_TIME DATETIME NOT NULL,
INTERVIEW_ROUND INT NOT NULL,
INTERVIEW_GRADE INT,
FOREIGN KEY (CANDIDATE_ID) REFERENCES SELECTED_FOR_INTERVIEW (SELECTED_APPLICANT) ON DELETE CASCADE,
FOREIGN KEY (INTERVIEWER_ID) REFERENCES INTERVIEWER (INTERVIEWER_ID) ON DELETE CASCADE,
FOREIGN KEY (JOB_POSITION) REFERENCES JOB (JOB_ID) ON DELETE CASCADE,
CHECK (INTERVIEW_GRADE BETWEEN 0 AND 100)
);

CREATE TABLE PRODUCT (
PRODUCT_ID INT PRIMARY KEY NOT NULL,
PRODUCT_TYPE VARCHAR(30),
PRODUCT_SIZE VARCHAR(30),
PRODUCT_LIST_PRICE DECIMAL(10, 2),
PRODUCT_WEIGHT DECIMAL(10, 2),
PRODUCT_STYLE VARCHAR(50)
);

CREATE TABLE MARKETING_SITE (
SITE_ID INT PRIMARY KEY NOT NULL,
SITE_NAME VARCHAR(30),
SITE_LOCATION VARCHAR(100)
);

CREATE TABLE EMPLOYEE_WORKS_FOR_SITE (
EMPLOYEE_ID INT,
SITE_ID INT,
PRIMARY KEY (EMPLOYEE_ID, SITE_ID),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (SITE_ID) REFERENCES MARKETING_SITE (SITE_ID) ON DELETE CASCADE
);

CREATE TABLE PRODUCT_SOLD_AT_SITE (
PRODUCT_ID INT,
SITE_ID INT,
PRIMARY KEY (PRODUCT_ID, SITE_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID) ON DELETE CASCADE,
FOREIGN KEY (SITE_ID) REFERENCES MARKETING_SITE (SITE_ID) ON DELETE CASCADE
);

CREATE TABLE SALE (
SALE_ID INT PRIMARY KEY AUTO_INCREMENT,
SALESMAN_ID INT,
CUSTOMER_ID INT,
PRODUCT_ID INT,
SITE_ID INT,
SALES_TIME DATETIME NOT NULL,
FOREIGN KEY (SALESMAN_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID),
FOREIGN KEY (SITE_ID) REFERENCES MARKETING_SITE (SITE_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID)
);

CREATE TABLE CUSTOMER_BUYS_SALE (
SALE_ID INT,
CUSTOMER_ID INT,
PRIMARY KEY (SALE_ID, CUSTOMER_ID),
FOREIGN KEY (SALE_ID) REFERENCES SALE (SALE_ID) ON DELETE CASCADE,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON DELETE CASCADE
);

CREATE TABLE VENDOR (
VENDOR_ID INT PRIMARY KEY NOT NULL,
VENDOR_NAME VARCHAR(30),
VENDOR_ADDRESS_LINE_1 VARCHAR(50),
VENDOR_ADDRESS_LINE_2 VARCHAR(50),
VENDOR_CITY VARCHAR(30),
VENDOR_STATE VARCHAR(20),
VENDOR_ZIP_CODE VARCHAR(10),
VENDOR_ACCOUNT_NO INT,
VENDOR_CREDIT_RATING INT,
VENDOR_WEBSERVICE_URL VARCHAR(50)
);

CREATE TABLE PART (
PART_ID INT PRIMARY KEY AUTO_INCREMENT,
PART_TYPE VARCHAR(50)
);

CREATE TABLE PART_SUPPLIED_BY_VENDOR (
VENDOR_ID INT,
PART_ID INT,
PART_PRICE DECIMAL(10, 2),
PRIMARY KEY (PART_ID, VENDOR_ID),
FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR (VENDOR_ID) ON DELETE CASCADE,
FOREIGN KEY (PART_ID) REFERENCES PART (PART_ID) ON DELETE CASCADE
);

CREATE TABLE PART_USED_IN_PRODUCT (
PART_ID INT,
PRODUCT_ID INT,
USED_AMOUNT INT,
PRIMARY KEY (PART_ID, PRODUCT_ID),
FOREIGN KEY (PART_ID) REFERENCES PART (PART_ID) ON DELETE CASCADE,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID) ON DELETE CASCADE
);

CREATE TABLE SALARY (
EMPLOYEE_ID INT,
TRANSACTION_NO INT,
PAY_DATE DATE,
PAY_AMOUNT DECIMAL(10, 2),
PRIMARY KEY (EMPLOYEE_ID, TRANSACTION_NO),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

ALTER TABLE CUSTOMER 
MODIFY COLUMN PREFERRED_SALES_REP INT NULL;
DELIMITER //
CREATE TRIGGER update_preferred_sales_rep
AFTER INSERT ON SALE
FOR EACH ROW
BEGIN
UPDATE CUSTOMER c
    SET c.PREFERRED_SALES_REP = (
        SELECT s.SALESMAN_ID
        FROM SALE s
        WHERE s.CUSTOMER_ID = c.CUSTOMER_ID
        GROUP BY s.SALESMAN_ID
        ORDER BY COUNT(*) DESC
        LIMIT 1
    )
    WHERE c.CUSTOMER_ID = NEW.CUSTOMER_ID;
END//
DELIMITER ;

ALTER TABLE EMPLOYEE 
DROP FOREIGN KEY EMPLOYEE_ibfk_3;

ALTER TABLE EMPLOYEE
ADD CONSTRAINT EMPLOYEE_ibfk_3 FOREIGN KEY (EMPLOYEE_SUPERVISOR) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE;

ALTER TABLE SALE
ADD CONSTRAINT CHECK_PRODUCT_SOLD_AT_SITE
FOREIGN KEY (PRODUCT_ID, SITE_ID) REFERENCES PRODUCT_SOLD_AT_SITE (PRODUCT_ID, SITE_ID);

ALTER TABLE SALE
ADD CONSTRAINT CHECK_EMPLOYEE_WORKS_AT_SITE
FOREIGN KEY (SALESMAN_ID, SITE_ID) REFERENCES EMPLOYEE_WORKS_FOR_SITE (EMPLOYEE_ID, SITE_ID);

DELIMITER //
CREATE TRIGGER CHECK_SALE_CONSTRAINTS
BEFORE INSERT ON SALE
FOR EACH ROW
BEGIN
    DECLARE PRODUCT_SOLD_IN_SITE INT;
    DECLARE EMPLOYEE_WORKS_AT_SITE INT;
    
    SELECT COUNT(*) INTO PRODUCT_SOLD_IN_SITE
    FROM PRODUCT_SOLD_AT_SITE
    WHERE PRODUCT_ID = NEW.PRODUCT_ID AND SITE_ID = NEW.SITE_ID;
    
    IF PRODUCT_SOLD_IN_SITE = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRODUCT IS NOT SOLD AT THIS SITE';
    END IF;
    
    -- Check if employee works at the site
    SELECT COUNT(*) INTO EMPLOYEE_WORKS_AT_SITE
    FROM EMPLOYEE_WORKS_FOR_SITE
    WHERE EMPLOYEE_ID = NEW.SALESMAN_ID AND SITE_ID = NEW.SITE_ID;
    
    IF EMPLOYEE_WORKS_AT_SITE = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EMPLOYEE DOES NOT WORK AT THIS SITE';
    END IF;
END//
DELIMITER ;

ALTER TABLE PRODUCT_SOLD_AT_SITE
DROP FOREIGN KEY PRODUCT_SOLD_AT_SITE_ibfk_2;

ALTER TABLE PRODUCT_SOLD_AT_SITE
ADD CONSTRAINT PRODUCT_SOLD_AT_SITE_ibfk_2 
FOREIGN KEY (SITE_ID) REFERENCES MARKETING_SITE (SITE_ID) ON DELETE CASCADE;

ALTER TABLE APPLICANT
DROP CHECK APPLICANT_chk_1;

ALTER TABLE APPLICANT
ADD CONSTRAINT APPLICANT_chk_1 CHECK (
    (APPLICANT_CATEGORY = 'EMPLOYEE' AND EMPLOYEE_ID IS NOT NULL AND POTENTIAL_EMPLOYEE_ID IS NULL) OR
    (APPLICANT_CATEGORY = 'POTENTIAL_EMPLOYEE' AND POTENTIAL_EMPLOYEE_ID IS NOT NULL AND EMPLOYEE_ID IS NULL)
);


SELECT * FROM PERSON;
SELECT * FROM EMPLOYEE;
SELECT * FROM POTENTIAL_EMPLOYEE;
SELECT * FROM CUSTOMER;
SELECT * FROM DEPARTMENT;
SELECT * FROM SHIFT;
SELECT * FROM EMPLOYEE_WORKS_AT_DEPARTMENT;
SELECT * FROM JOB;
SELECT * FROM APPLICANT;
SELECT * FROM APPLIED;
SELECT * FROM SELECTED_FOR_INTERVIEW;
SELECT * FROM INTERVIEWER;
SELECT * FROM INTERVIEW;
SELECT * FROM PRODUCT;
SELECT * FROM MARKETING_SITE;
SELECT * FROM EMPLOYEE_WORKS_FOR_SITE;
SELECT * FROM PRODUCT_SOLD_AT_SITE;
SELECT * FROM SALE;
SELECT * FROM VENDOR;
SELECT * FROM PART;
SELECT * FROM PART_SUPPLIED_BY_VENDOR;
SELECT * FROM PART_USED_IN_PRODUCT;
SELECT * FROM SALARY;

SHOW TABLES;

